// Code generated by ChatGPT (with some bugfixes)

#include <Eigen/Dense>

using namespace Eigen;

namespace QuadricFitSolver {

VectorXd solve(const MatrixXd &M, const MatrixXd &N, double tolerance) {
  // Perform an Eigen decomposition
  SelfAdjointEigenSolver<MatrixXd> solver(N);

  // Check for positive semi-definiteness of N
  if (solver.info() != Success) {
    throw std::runtime_error("Decomposition of N failed");
  }

  // Extract the non-zero eigenvalues and eigenvectors
  VectorXd eigenValues = solver.eigenvalues();
  MatrixXd eigenVectors = solver.eigenvectors();

  // Compute rank of N
  int rank = (eigenValues.array() > tolerance).count();

  // Reduce M and N to the subspace of the significant eigenvalues
  MatrixXd reducedEigenVectors = eigenVectors.rightCols(rank);
  MatrixXd reducedM = reducedEigenVectors.transpose() * M * reducedEigenVectors;
  MatrixXd reducedN = reducedEigenVectors.transpose() * N * reducedEigenVectors;

  // Solve the reduced eigenproblem
  GeneralizedSelfAdjointEigenSolver<MatrixXd> reducedSolver(reducedM, reducedN);

  if (reducedSolver.info() != Success) {
    throw std::runtime_error("Reduced generalized eigenproblem failed");
  }

  // Return the eigenvector corresponding to the smallest eigenvalue
  int minIndex;
  reducedSolver.eigenvalues().minCoeff(&minIndex);
  VectorXd result = reducedEigenVectors * reducedSolver.eigenvectors().col(minIndex);

  return result;
}

}
